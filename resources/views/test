<?php

namespace App\Http\Controllers\Api\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Auth;
use App\Models\User;
use Validator;
use Hash;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Mail;
use App\Mail\SendOtp;
class UserController extends Controller
{

    public function register(Request $request)
    {
        $user = User::where('email', $request->email)
            ->where('verify_email', 0)
            ->first();

        if ($user) {

            $random = Str::random(6);
            Mail::to($request->email)->send(new SendOtp($random));
            $user->update(['otp' => $random]);
            $user->update(['verify_email' => 0]);

            return response(['message' => 'Please check your email for validate your email.'], 200);
        } else {
            Validator::extend('contains_dot', function ($attribute, $value, $parameters, $validator) {
                return strpos($value, '.') !== false;
            });

            $validator = Validator::make($request->all(), [
                'first_name' => 'required|string|min:2|max:100',
                'last_name' => 'required|string|min:2|max:100',
                'email' => 'required|string|email|max:60|unique:users|contains_dot',
                'password' => 'required|string|min:6|confirmed',
                'user_type' => ['required', Rule::in(['USER', 'ADMIN', 'SUPER ADMIN'])],
            ], [
                'email.contains_dot' => 'without (.) Your email is invalid',
            ]);
            if ($validator->fails()) {
                return response()->json(["message" => $validator->errors()], 400);
            }


            $userData = [
                'first_name' => $request->first_name,
                'last_name'=> $request->last_name,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'user_type' => $request->user_type,
                'otp' =>  Str::random(6),
                'verify_email' => 0
            ];

            $user = User::create($userData);

            Mail::to($request->email)->send(new SendOtp($user->otp));
            return response()->json([
                'message' => 'Please check your email to valid your email',
            ],200);
        }
    }

    public function emailVerified(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'otp' => 'required',
        ]);
    
        if ($validator->fails()) {
            return response(['errors' => $validator->errors()], 422);
        }
    
        $user = User::where('otp', $request->otp)->first();
    
        if (!$user) {
            return response(['message' => 'Invalid OTP'], 422);
        }
    
        $user->update(['verify_email' => 1, 'otp' => 0]);
    
        $token = $user->createToken('Personal Access Token')->accessToken;
    
        return response([
            'message' => 'Email verified successfully',
            'token' => $token,
        ]);
    }

    public function forgetPassword(Request $request)
    {
        $email = $request->email;
        $user = User::where('email', $email)->first();
        if (!$user) {
            return response()->json(['error' => 'Email not found'], 401);
        }else if($user->google_id != null || $user->apple_id != null){
            return response()->json([
                'message' => 'Your are social user, You do not need to forget password',
            ],400);
        }
        else {
            $random = Str::random(6);
            Mail::to($request->email)->send(new SendOtp($random));
            $user->update(['otp' => $random]);
            $user->update(['verify_email' => 0]);
            return response()->json(['message' => 'Please check your email for get the OTP']);
        }
    }

    public function resetPassword(Request $request)
    {
        $user = User::where('email', $request->email)->first();

        if (!$user) {
            return response()->json([
                "message" => "Your email is not exists"
            ], 401);
        }
        if (!$user->verify_email == 0) {
            return response()->json([
                "message" => "Your email is not verified"
            ], 401);
        }
        $validator = Validator::make($request->all(), [
            'password' => 'required|string|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 400);
        } else {
            $user->update(['password' => Hash::make($request->password)]);
            return response()->json(['message' => 'Password reset successfully'], 200);
        }
    }

    public function loginUser(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials)) {
            $user = Auth::user();
            $token = $user->createToken('example')->accessToken;
            return response()->json(['status' => '200', 'token' => $token]);
        } else {
            return response()->json(['status' => '401', 'message' => 'Unauthorized'], 401);
        }
    }

    
    public function user()
    {
        $user = Auth::user();
        if ($user) {
            return response()->json(['status' => '200', 'user' => $user]);
        } else {
            return response()->json(['status' => '401', 'message' => 'No user authenticated'], 401);
        }
    }

    public function logoutUser(Request $request)
    {
        $user = Auth::user();

        if ($user) {
            $request->user()->token()->revoke();
            return response()->json(['status' => '200', 'message' => 'Successfully logged out']);
        } else {
            return response()->json(['status' => '401', 'message' => 'No user authenticated'], 401);
        }
    }

}
